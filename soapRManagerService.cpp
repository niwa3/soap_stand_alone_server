/* soapRManagerService.cpp
   Generated by gSOAP 2.8.16 from RManager.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapRManagerService.h"

RManagerService::RManagerService()
{	RManagerService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

RManagerService::RManagerService(const struct soap &_soap) : soap(_soap)
{ }

RManagerService::RManagerService(soap_mode iomode)
{	RManagerService_init(iomode, iomode);
}

RManagerService::RManagerService(soap_mode imode, soap_mode omode)
{	RManagerService_init(imode, omode);
}

RManagerService::~RManagerService()
{ }

void RManagerService::RManagerService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "urn:rm", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
};

void RManagerService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void RManagerService::reset()
{	destroy();
	soap_done(this);
	soap_initialize(this);
	RManagerService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
RManagerService *RManagerService::copy()
{	RManagerService *dup = SOAP_NEW_COPY(RManagerService(*(struct soap*)this));
	return dup;
}
#endif

int RManagerService::soap_close_socket()
{	return soap_closesock(this);
}

int RManagerService::soap_force_close_socket()
{	return soap_force_closesock(this);
}

int RManagerService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int RManagerService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int RManagerService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int RManagerService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void RManagerService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void RManagerService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *RManagerService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void RManagerService::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *RManagerService::soap_header()
{	return this->header;
}

int RManagerService::run(int port)
{	if (soap_valid_socket(this->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				return this->error;
			soap_destroy(this);
			soap_end(this);
		}
	}
	else
		return this->error;
	return SOAP_OK;
}

SOAP_SOCKET RManagerService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET RManagerService::accept()
{	return soap_accept(this);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int RManagerService::ssl_accept()
{	return soap_ssl_accept(this);
}
#endif

int RManagerService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif

		if (soap_begin_serve(this))
		{	if (this->error >= SOAP_STOP)
				continue;
			return this->error;
		}
		if (dispatch() || (this->fserveloop && this->fserveloop(this)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve_ns1__register(RManagerService*);
static int serve_ns1__change(RManagerService*);
static int serve_ns1__delete(RManagerService*);

int RManagerService::dispatch()
{	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "ns1:register"))
		return serve_ns1__register(this);
	if (!soap_match_tag(this, this->tag, "ns1:change"))
		return serve_ns1__change(this);
	if (!soap_match_tag(this, this->tag, "ns1:delete"))
		return serve_ns1__delete(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve_ns1__register(RManagerService *soap)
{	struct ns1__register soap_tmp_ns1__register;
	ns1__transport res;
	res.soap_default(soap);
	soap_default_ns1__register(soap, &soap_tmp_ns1__register);
	if (!soap_get_ns1__register(soap, &soap_tmp_ns1__register, "ns1:register", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->register_(soap_tmp_ns1__register.req, res);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	res.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || res.soap_put(soap, "ns1:transport", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || res.soap_put(soap, "ns1:transport", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns1__change(RManagerService *soap)
{	struct ns1__change soap_tmp_ns1__change;
	ns1__transport res;
	res.soap_default(soap);
	soap_default_ns1__change(soap, &soap_tmp_ns1__change);
	if (!soap_get_ns1__change(soap, &soap_tmp_ns1__change, "ns1:change", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->change(soap_tmp_ns1__change.req, res);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	res.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || res.soap_put(soap, "ns1:transport", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || res.soap_put(soap, "ns1:transport", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns1__delete(RManagerService *soap)
{	struct ns1__delete soap_tmp_ns1__delete;
	ns1__transport res;
	res.soap_default(soap);
	soap_default_ns1__delete(soap, &soap_tmp_ns1__delete);
	if (!soap_get_ns1__delete(soap, &soap_tmp_ns1__delete, "ns1:delete", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->delete_(soap_tmp_ns1__delete.req, res);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	res.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || res.soap_put(soap, "ns1:transport", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || res.soap_put(soap, "ns1:transport", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
