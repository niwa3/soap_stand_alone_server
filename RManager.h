// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* RManager.h
   Generated by wsdl2h 2.8.16 from RManager.wsdl and typemap.dat
   2016-12-22 08:48:27 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2013 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on RManager.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   urn:rm                                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "urn:rm"

*/

#define SOAP_NAMESPACE_OF_ns1	"urn:rm"
//gsoap ns1   schema namespace:	urn:rm
//gsoap ns1   schema form:	qualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/// Primitive built-in type "xs:anyURI"
typedef std::string xsd__anyURI;

/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns1__relation.
class ns1__relation;

//  Forward declaration of class ns1__body.
class ns1__body;

//  Forward declaration of class ns1__header.
class ns1__header;

//  Forward declaration of class ns1__transport.
class ns1__transport;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:rm                                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:rm                                                                   *
 *                                                                            *
\******************************************************************************/


/// "urn:rm":relation is a complexType.
/// class ns1__relation operations:
/// - soap_new_ns1__relation(soap*) allocate
/// - soap_new_ns1__relation(soap*, int num) allocate array
/// - soap_new_req_ns1__relation(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__relation(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__relation(soap*, ns1__relation*) deserialize from a stream
/// - int soap_write_ns1__relation(soap, ns1__relation*) serialize to a stream
class ns1__relation
{ public:
/// Element node-id of type xs:anyURI.
    xsd__anyURI                          node_id                        1;	///< Required element.
/// Element service-id of type xs:anyURI.
    xsd__anyURI                          service_id                     1;	///< Required element.
/// Element relation-id of type xs:int.
    int                                  relation_id                    1;	///< Required element.
/// Element anonymous-method of type xs:string.
    std::string                          anonymous_method               1;	///< Required element.
/// Element privacy-lvl of type xs:int.
    int                                  privacy_lvl                    1;	///< Required element.
/// Element interval of type xs:int.
    int                                  interval                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:rm":body is a complexType.
/// class ns1__body operations:
/// - soap_new_ns1__body(soap*) allocate
/// - soap_new_ns1__body(soap*, int num) allocate array
/// - soap_new_req_ns1__body(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__body(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__body(soap*, ns1__body*) deserialize from a stream
/// - int soap_write_ns1__body(soap, ns1__body*) serialize to a stream
class ns1__body
{ public:
/// Vector of ns1__relation* with length 1..unbounded
    std::vector<ns1__relation         > relation                       1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:rm":header is a complexType.
/// class ns1__header operations:
/// - soap_new_ns1__header(soap*) allocate
/// - soap_new_ns1__header(soap*, int num) allocate array
/// - soap_new_req_ns1__header(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__header(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__header(soap*, ns1__header*) deserialize from a stream
/// - int soap_write_ns1__header(soap, ns1__header*) serialize to a stream
class ns1__header
{ public:
/// Attribute massage of type xs:string.
   @std::string                          massage                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:rm":transport is a complexType.
/// class ns1__transport operations:
/// - soap_new_ns1__transport(soap*) allocate
/// - soap_new_ns1__transport(soap*, int num) allocate array
/// - soap_new_req_ns1__transport(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__transport(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__transport(soap*, ns1__transport*) deserialize from a stream
/// - int soap_write_ns1__transport(soap, ns1__transport*) serialize to a stream
class ns1__transport
{ public:
/// Element header of type "urn:rm":header.
    ns1__header                         header                         1;	///< Nillable pointer.
/// Element body of type "urn:rm":body.
    ns1__body                           body                           1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:rm                                                                   *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "urn:rm":req of type "urn:rm":transport.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:rm":res of type "urn:rm":transport.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:rm                                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	RManager 
//gsoap ns1  service type:	RManagerPortType 
//gsoap ns1  service port:	http://10.0.0.2/cgi-bin/server.cgi 
//gsoap ns1  service namespace:	urn:rm 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage RManager Definitions

@section RManager_bindings Service Bindings

  - @ref RManager

@section RManager_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page RManager Binding "RManager"

@section RManager_service Service Documentation "RManager"
gSOAP 2.8.16 generated service definition

@section RManager_operations Operations of Binding  "RManager"

  - @ref ns1__data

@section RManager_ports Endpoints of Binding  "RManager"

  - http://10.0.0.2/cgi-bin/server.cgi

Note: use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   RManager                                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__data                                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__data" of service binding "RManager"

/**

Operation details:
Service definition of function ns1__data

  - https://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__data(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__transport*                     req,
    // output parameters:
// Warning: internal error, no QName in fname()

// Warning: undefined QName '' for type '_x003f' in namespace '?' (FIXME: check WSDL and schema definitions)
    _x003f                             &res
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__data(
    struct soap *soap,
    // input parameters:
    ns1__transport*                     req,
    // output parameters:
// Warning: internal error, no QName in fname()

// Warning: undefined QName '' for type '_x003f' in namespace '?' (FIXME: check WSDL and schema definitions)
    _x003f                             &res
  );
@endcode

C++ proxy class (defined in soapRManagerProxy.h):
@code
  class RManagerProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRManagerService.h):
@code
  class RManagerService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	data SOAP
//gsoap ns1  service method-style:	data rpc
//gsoap ns1  service method-encoding:	data http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	data ""
//gsoap ns1  service method-output-action:	data Response
int ns1__data(
    ns1__transport*                     req,	///< Input parameter
// Warning: internal error, no QName in fname()

// Warning: undefined QName '' for type '_x003f' in namespace '?' (FIXME: check WSDL and schema definitions)
    ns1__transport                      &res	///< Output parameter
);

/**

@page RManager Binding "RManager"

@section RManager_policy_enablers Policy Enablers of Binding  "RManager"

Based on policies, this service imports

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "urn:rm"

  - <ns1:req> (use wsdl2h option -g to auto-generate)

  - <ns1:res> (use wsdl2h option -g to auto-generate)

*/

/* End of RManager.h */
